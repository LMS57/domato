<root root=true> = <lines count=1>

<primary_expression>	=	<IDENTIFIER>
<primary_expression>	=	<CONSTANT>
<primary_expression>	=	<STRING_LITERAL>
<primary_expression>	=	<(><expression><right_paran>

<postfix_expression>	=	<primary_expression>
<postfix_expression>	=	<postfix_expression><[><expression><]>
<postfix_expression>	=	<postfix_expression><(><right_paran>
<postfix_expression>	=	<postfix_expression><(><argument_expression_list><right_paran>
<postfix_expression>	=	<FUNCTION_CALL>
<postfix_expression>	=	<postfix_expression><.><IDENTIFIER>
<postfix_expression>	=	<postfix_expression><space><PTR_OP><space><IDENTIFIER>
<postfix_expression>	=	<postfix_expression><space><INC_OP>
<postfix_expression>	=	<postfix_expression><space><DEC_OP>

<argument_expression_list>	=	<assignment_expression>
<argument_expression_list>	=	<argument_expression_list><,><assignment_expression>

<unary_expression>	=	<postfix_expression>
<unary_expression>	=	<INC_OP><space><unary_expression>
<unary_expression>	=	<DEC_OP><space><unary_expression>
<unary_expression>	=	<unary_operator><space><cast_expression>
<unary_expression>	=	<SIZEOF><space><unary_expression>
<unary_expression>	=	<SIZEOF><(><type_name><right_paran>

<unary_operator>	=	<&>
<unary_operator>	=	<*>
<unary_operator>	=	<+>
<unary_operator>	=	<->
<unary_operator>	=	<~>
<unary_operator>	=	<ex>

<cast_expression>	=	<unary_expression>
<cast_expression>	=	<(><type_name><right_paran><cast_expression>

<multiplicative_expression>	=	<cast_expression>
<multiplicative_expression>	=	<multiplicative_expression><*><cast_expression>
<multiplicative_expression>	=	<multiplicative_expression></><cast_expression>
<multiplicative_expression>	=	<multiplicative_expression><%><cast_expression>

<additive_expression>	=	<multiplicative_expression>
<additive_expression>	=	<additive_expression><+><multiplicative_expression>
<additive_expression>	=	<additive_expression><-><multiplicative_expression>

<shift_expression>	=	<additive_expression>
<shift_expression>	=	<shift_expression><space><LEFT_OP><space><additive_expression>
<shift_expression>	=	<shift_expression><space><RIGHT_OP><space><additive_expression>

<relational_expression>	=	<shift_expression>
<relational_expression>	=	<relational_expression><lt><shift_expression>
<relational_expression>	=	<relational_expression><gt><shift_expression>
<relational_expression>	=	<relational_expression><space><LE_OP><space><shift_expression>
<relational_expression>	=	<relational_expression><space><GE_OP><space><shift_expression>

<equality_expression>	=	<relational_expression>
<equality_expression>	=	<equality_expression><space><EQ_OP><space><relational_expression>
<equality_expression>	=	<equality_expression><space><NE_OP><space><relational_expression>

<and_expression>	=	<equality_expression>
<and_expression>	=	<and_expression><&><equality_expression>

<exclusive_or_expression>	=	<and_expression>
<exclusive_or_expression>	=	<exclusive_or_expression><^><and_expression>

<inclusive_or_expression>	=	<exclusive_or_expression>
<inclusive_or_expression>	=	<inclusive_or_expression><|><exclusive_or_expression>

<logical_and_expression>	=	<inclusive_or_expression>
<logical_and_expression>	=	<logical_and_expression><space><AND_OP><space><inclusive_or_expression>

<logical_or_expression>	=	<logical_and_expression>
<logical_or_expression>	=	<logical_or_expression><space><OR_OP><space><logical_and_expression>

<conditional_expression>	=	<logical_or_expression>
<conditional_expression>	=	<logical_or_expression><?><expression><:><conditional_expression>

<assignment_expression>	=	<conditional_expression>
<assignment_expression>	=	<unary_expression><space><assignment_operator><space><assignment_expression>

<assignment_operator>	=	<=>
<assignment_operator>	=	<MUL_ASSIGN>
<assignment_operator>	=	<DIV_ASSIGN>
<assignment_operator>	=	<MOD_ASSIGN>
<assignment_operator>	=	<ADD_ASSIGN>
<assignment_operator>	=	<SUB_ASSIGN>
<assignment_operator>	=	<LEFT_ASSIGN>
<assignment_operator>	=	<RIGHT_ASSIGN>
<assignment_operator>	=	<AND_ASSIGN>
<assignment_operator>	=	<XOR_ASSIGN>
<assignment_operator>	=	<OR_ASSIGN>

<expression>	=	<assignment_expression>
<expression>	=	<expression><,><assignment_expression>

<constant_expression>	=	<conditional_expression>

<declaration>	=	<declaration_specifiers><;>
<declaration>	=	<declaration_specifiers><space><init_declarator_list><;>

<declaration_specifiers>	=	<storage_class_specifier>
<declaration_specifiers>	=	<storage_class_specifier><space><declaration_specifiers>
<declaration_specifiers>	=	<type_specifier>
<declaration_specifiers>	=	<type_specifier><space><declaration_specifiers>
<declaration_specifiers>	=	<type_qualifier>
<declaration_specifiers>	=	<type_qualifier><space><declaration_specifiers>

<init_declarator_list>	=	<init_declarator>
<init_declarator_list>	=	<init_declarator_list><,><init_declarator>

<init_declarator>	=	<declarator>
<init_declarator>	=	<declarator><=><initializer>

<storage_class_specifier>	=	<TYPEDEF>
<storage_class_specifier>	=	<EXTERN>
<storage_class_specifier>	=	<STATIC>
<storage_class_specifier>	=	<AUTO>
<storage_class_specifier>	=	<REGISTER>

<type_specifier>	=	<VOID>
<type_specifier>	=	<CHAR>
<type_specifier>	=	<SHORT>
<type_specifier>	=	<INT>
<type_specifier>	=	<LONG>
<type_specifier>	=	<FLOAT>
<type_specifier>	=	<DOUBLE>
<type_specifier>	=	<SIGNED>
<type_specifier>	=	<UNSIGNED>
<type_specifier>	=	<struct_or_union_specifier>
<type_specifier>	=	<enum_specifier>
###<type_specifier>	=	<TYPE_NAME>

<struct_or_union_specifier>	=	<struct_or_union><space><IDENTIFIER2><{><struct_declaration_list><}>
<struct_or_union_specifier>	=	<struct_or_union><{><struct_declaration_list><}>
<struct_or_union_specifier>	=	<struct_or_union><space><IDENTIFIER>

<struct_or_union>	=	<STRUCT>
<struct_or_union>	=	<UNION>

<struct_declaration_list>	=	<struct_declaration>
<struct_declaration_list>	=	<struct_declaration_list><space><struct_declaration>

<struct_declaration>	=	<specifier_qualifier_list><space><struct_declarator_list><;>

<specifier_qualifier_list>	=	<type_specifier><space><specifier_qualifier_list>
<specifier_qualifier_list>	=	<type_specifier>
<specifier_qualifier_list>	=	<type_qualifier><space><specifier_qualifier_list>
<specifier_qualifier_list>	=	<type_qualifier>

<struct_declarator_list>	=	<struct_declarator>
<struct_declarator_list>	=	<struct_declarator_list><,><struct_declarator>

<struct_declarator>	=	<declarator>
<struct_declarator>	=	<:><constant_expression>
<struct_declarator>	=	<declarator><:><constant_expression>

<enum_specifier>	=	<ENUM><{><enumerator_list><}>
<enum_specifier>	=	<ENUM><space><IDENTIFIER2><{><enumerator_list><}>
<enum_specifier>	=	<ENUM><space><IDENTIFIER2>

<enumerator_list>	=	<enumerator>
<enumerator_list>	=	<enumerator_list><,><enumerator>

<enumerator>	=	<IDENTIFIER>
<enumerator>	=	<IDENTIFIER><=><constant_expression>

<type_qualifier>	=	<CONST>
<type_qualifier>	=	<VOLATILE>

<declarator>	=	<pointer><space><direct_declarator>
<declarator>	=	<direct_declarator>

<direct_declarator>	=	<IDENTIFIER2>
<direct_declarator>	=	<(><declarator><right_paran>
<direct_declarator>	=	<direct_declarator><[><constant_expression><]>
<direct_declarator>	=	<direct_declarator><[><]>
<direct_declarator>	=	<direct_declarator><(><parameter_type_list><right_paran>
<direct_declarator>	=	<direct_declarator><(><identifier_list><right_paran>
<direct_declarator>	=	<direct_declarator><(><right_paran>

### Treat parameters as different

<param_declarator>	=	<pointer><space><param_direct_declarator>
<param_declarator>	=	<param_direct_declarator>

<param_direct_declarator>	=	<IDENTIFIER3>
<param_direct_declarator>	=	<(><param_declarator><right_paran>
<param_direct_declarator>	=	<param_direct_declarator><[><constant_expression><]>
<param_direct_declarator>	=	<param_direct_declarator><[><]>
<param_direct_declarator>	=	<param_direct_declarator><(><parameter_type_list><right_paran>
<param_direct_declarator>	=	<param_direct_declarator><(><identifier_list><right_paran>
<param_direct_declarator>	=	<param_direct_declarator><(><right_paran>


<pointer>	=	<*>
<pointer>	=	<*><type_qualifier_list>
<pointer>	=	<*><pointer>
<pointer>	=	<*><type_qualifier_list><space><pointer>

<type_qualifier_list>	=	<type_qualifier>
<type_qualifier_list>	=	<type_qualifier_list><space><type_qualifier>

<parameter_type_list>	=	<parameter_list>
<parameter_type_list>	=	<parameter_list><,><ELLIPSIS>

<parameter_list>	=	<parameter_declaration>
<parameter_list>	=	<parameter_list><,><parameter_declaration>

<parameter_declaration>	=	<declaration_specifiers><space><param_declarator>
<parameter_declaration>	=	<declaration_specifiers><space><abstract_declarator>
<parameter_declaration>	=	<declaration_specifiers>

<identifier_list>	=	<IDENTIFIER>
<identifier_list>	=	<identifier_list><,><IDENTIFIER>

<type_name>	=	<specifier_qualifier_list>
<type_name>	=	<specifier_qualifier_list><space><abstract_declarator>

<abstract_declarator>	=	<pointer>
<abstract_declarator>	=	<direct_abstract_declarator>
<abstract_declarator>	=	<pointer><space><direct_abstract_declarator>

<direct_abstract_declarator>	=	<(><abstract_declarator><right_paran>
<direct_abstract_declarator>	=	<[><]>
<direct_abstract_declarator>	=	<[><constant_expression><]>
<direct_abstract_declarator>	=	<direct_abstract_declarator><[><]>
<direct_abstract_declarator>	=	<direct_abstract_declarator><[><constant_expression><]>
<direct_abstract_declarator>	=	<(><right_paran>
<direct_abstract_declarator>	=	<(><parameter_type_list><right_paran>
<direct_abstract_declarator>	=	<direct_abstract_declarator><(><right_paran>
<direct_abstract_declarator>	=	<direct_abstract_declarator><(><parameter_type_list><right_paran>

<initializer>	=	<assignment_expression>
<initializer>	=	<{><initializer_list><}>
<initializer>	=	<{><initializer_list><,><}>

<initializer_list>	=	<initializer>
<initializer_list>	=	<initializer_list><,><initializer>

<statement>	=	<labeled_statement>
<statement>	=	<compound_statement>
<statement>	=	<expression_statement>
<statement>	=	<selection_statement>
<statement>	=	<iteration_statement>
<statement>	=	<jump_statement>

<labeled_statement>	=	<IDENTIFIER2><:><statement>
<labeled_statement>	=	<CASE><space><constant_expression><:><statement>
<labeled_statement>	=	<DEFAULT><:><statement>

<compound_statement>	=	<{><}>
<compound_statement>	=	<{><statement_list><}>
<compound_statement>	=	<{><declaration_list><}>
<compound_statement>	=	<{><declaration_list><space><statement_list><}>

<declaration_list>	=	<declaration>
<declaration_list>	=	<declaration_list><space><declaration>

<statement_list>	=	<statement>
<statement_list>	=	<statement_list><space><statement>

<expression_statement>	=	<;>
<expression_statement>	=	<expression><;>

<selection_statement>	=	<IF><(><expression><right_paran><statement>
<selection_statement>	=	<IF><(><expression><right_paran><statement><space><ELSE><space><statement>
<selection_statement>	=	<SWITCH><(><expression><right_paran><statement>

<iteration_statement>	=	<WHILE><(><expression><right_paran><statement>
<iteration_statement>	=	<DO><space><statement><space><WHILE><(><expression><right_paran><;>
<iteration_statement>	=	<FOR><(><expression_statement><space><expression_statement><right_paran><statement>
<iteration_statement>	=	<FOR><(><expression_statement><space><expression_statement><space><expression><right_paran><statement>

<jump_statement>	=	<GOTO><space><IDENTIFIER><;>
<jump_statement>	=	<CONTINUE><;>
<jump_statement>	=	<BREAK><;>
<jump_statement>	=	<RETURN><;>
<jump_statement>	=	<RETURN><space><expression><;>

<translation_unit>	=	<external_declaration>
<translation_unit>	=	<translation_unit><space><external_declaration>

<external_declaration>	=	<function_definition>
<external_declaration>	=	<declaration>

<function_definition>	=	<declaration_specifiers><space><declarator><space><declaration_list><space><compound_statement>
<function_definition>	=	<declaration_specifiers><space><declarator><space><compound_statement>
<function_definition>	=	<declarator><space><declaration_list><space><compound_statement>
<function_definition>	=	<declarator><space><compound_statement>

<^>	=	^
<LEFT_OP>	=	<lt><lt>
<STRUCT>	=	struct
<:>	=	:
<SIGNED>	=	signed
<UNION>	=	union
<STATIC>	=	static
<CONST>	=	const
<AND_OP>	=	&&
<RIGHT_OP>	=	<gt><gt>
<ELSE>	=	else
<EXTERN>	=	extern
<WHILE>	=	while
<LEFT_ASSIGN>	=	<lt><eq>
<;>	=	;
<RIGHT_ASSIGN>	=	<gt><eq>
<AND_ASSIGN>	=	&<eq>
<*>	=	*
<GE_OP>	=	<gt><eq>
<INT>	=	int
<AUTO>	=	auto
<MOD_ASSIGN>	=	%<eq>
<+>	=	+
<DO>	=	do
<IF>	=	if
<VOLATILE>	=	volatile
<ELLIPSIS>	=	...
<%>	=	%
<CASE>	=	case
<RETURN>	=	return
<SUB_ASSIGN>	=	-<eq>
<ADD_ASSIGN>	=	+<eq>
<=>	=	<eq>
<XOR_ASSIGN>	=	^<eq>
<BREAK>	=	break
<,>	=	,
<PTR_OP>	=	.<gt>
<&>	=	&
<{>	=	{
<{>	=	<lt>%
<DEC_OP>	=	--
<ENUM>	=	enum
<CONTINUE>	=	continue
<REGISTER>	=	register
<->	=	-
<CHAR>	=	char
<VOID>	=	void
<SIZEOF>	=	sizeof
<LONG>	=	long
<DIV_ASSIGN>	=	/<eq>
<?>	=	?

### TODO custom types
###<TYPE_NAME>	=	<IDENTIFIER>




<EQ_OP>	=	<eq><eq>
<.>	=	.
<OR_OP>	=	||
<SWITCH>	=	switch
<TYPEDEF>	=	typedef
<SHORT>	=	short
<GOTO>	=	goto
<FOR>	=	for
<}>	=	}
<}>	=	%<gt>
</>	=	/
<[>	=	[
<[>	=	<lt>:
<UNSIGNED>	=	unsigned
<MUL_ASSIGN>	=	*<eq>
<DOUBLE>	=	double
<]>	=	:<gt>
<]>	=	]
<INC_OP>	=	++
<FLOAT>	=	float
<OR_ASSIGN>	=	|<eq>
<~>	=	~
<(>	=	(
<DEFAULT>	=	default
<NE_OP>	=	<ex><eq>
<LE_OP>	=	<lt><eq>
<|>	=	|


<x> 	=	x
<x>	=	X

<H>	=	<hex>
<H>	=	<hex><H>

<IS>	=	u
<IS>	=	U
<IS>	=	l
<IS>	=	L
<IS>	=	<IS><IS>
<IS>	=	

<D>	=	<int min=0 max=9>
<D>	=	<D><D>


<L>	=	<valid_alphabet>
<L>	=	

<quote>	=	\<char>
<quote>	=	<any bad="\'">
<quote>	=	<quote><quote>

<quote2>	=	\<char>
<quote2>	=	<any bad='\"'>
<quote2>	=	<quote><quote>

<e>	=	e
<e>	=	E

<sign>	=	+
<sign>	=	-

<E>	=	<e><sign><D>

<E2>	=	<E>
<E2>	=	

<D2>	=	<D>
<D2>	=	

<FS>	=	f
<FS>	=	F
<FS>	=	l
<FS>	=	L
<FS>	=	

### Functions
### memset
### memcpy
### memcmp
### strcmp
### strcpy
### atoi 
### strcat
###
###
<FUNCTION_CALL>	=	memset(<postfix_expression>,<postfix_expression>,<postfix_expression>);
<FUNCTION_CALL>	=	memcpy(<postfix_expression>,<postfix_expression>,<postfix_expression>);
<FUNCTION_CALL>	=	memcmp(<postfix_expression>,<postfix_expression>,<postfix_expression>);
<FUNCTION_CALL>	=	strcmp(<postfix_expression>,<postfix_expression>);
<FUNCTION_CALL>	=	strcpy(<postfix_expression>,<postfix_expression>);
<FUNCTION_CALL>	=	atoi(<postfix_expression>);
<FUNCTION_CALL>	=	strcat(<postfix_expression>,<postfix_expression>);

### custom constant types

<CONSTANT>	=	0<x><H><IS>
<CONSTANT>	=	0<D><IS>
<CONSTANT>	=	<D><IS>
<CONSTANT>	=	<L>'<quote>

<CONSTANT>	=	<D><E><FS>
<CONSTANT>	=	<D2>.<D><E2><FS>
<CONSTANT>	=	<D>.<D2><E2><FS>

<STRING_LITERAL>	=	<L>"<quote2>"

<IDENTIFIER>	=	<call function=find_variable>

<IDENTIFIER2>	=	<call function=create_variable>

<IDENTIFIER3>	=	<valid_alphabet><string>

!begin function find_variable
	import random
	ret_val = context['custom'][random.randint(0,len(context['custom'])-1)]	
!end function

!begin function create_variable
	if "custom" not in attributes:
		alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789'
		import random
		length = random.randint(0,30)
		ret_val = alphabet[random.randint(0,53)]+"".join([alphabet[int(random.random()*len(alphabet))] for _ in range(length)])
	else:
		ret_val = attributes['custom']
	context['custom'].append(ret_val)
!end function

### LINES
!begin lines

###<IDENTIFIER2 beforeoutput=init>
###<IDENTIFIER>

<translation_unit>

!end lines
